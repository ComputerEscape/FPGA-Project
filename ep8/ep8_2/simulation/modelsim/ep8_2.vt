`timescale 1 ps/ 1 ps
module ep8_2_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg CLOCK2_50;
reg CLOCK3_50;
reg CLOCK4_50;
reg CLOCK_50;
reg treg_PS2_CLK;
reg treg_PS2_CLK2;
reg treg_PS2_DAT;
reg treg_PS2_DAT2;

// wires                                               
wire [6:0]  HEX0;
wire [6:0]  HEX1;
wire [6:0]  HEX2;
wire [6:0]  HEX3;
wire [6:0]  HEX4;
wire [6:0]  HEX5;
wire [9:0]  LEDR;
wire PS2_CLK;
wire PS2_CLK2;
wire PS2_DAT;
wire PS2_DAT2;

// assign statements (if any)                          
assign PS2_CLK = treg_PS2_CLK;
assign PS2_CLK2 = treg_PS2_CLK2;
assign PS2_DAT = treg_PS2_DAT;
assign PS2_DAT2 = treg_PS2_DAT2;

ep8_2 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK2_50(CLOCK2_50),
	.CLOCK3_50(CLOCK3_50),
	.CLOCK4_50(CLOCK4_50),
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_CLK2(PS2_CLK2),
	.PS2_DAT(PS2_DAT),
	.PS2_DAT2(PS2_DAT2)
);
parameter [31:0] clock_period = 10;
parameter [31:0] kbd_clk_period = 60;

initial treg_PS2_CLK = 1'b1;

task kbd_sendcode; 
	input [7:0] code; // key to be sent 
	integer i; 
	reg[10:0] send_buffer; 
	
	begin 
		send_buffer[0] = 1'b0; // start bit 
	   send_buffer[8:1] = code; // code
		send_buffer[9] = ~(^code); // odd parity bit 
		send_buffer[10] = 1'b1; // stop bit 
		i = 0; 
		while( i < 11) 
		begin 
			// set kbd_data
			treg_PS2_DAT = send_buffer[i]; 
			#(kbd_clk_period/2) treg_PS2_CLK = 1'b0; 
			#(kbd_clk_period/2) treg_PS2_CLK = 1'b1;
			i = i + 1; 
		end
	end
endtask

initial
begin
	CLOCK_50 = 0;
	forever
		#(clock_period/2) CLOCK_50 = ~CLOCK_50;
end

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          

		 kbd_sendcode(8'h1C); #20;// press 'a'  
		 kbd_sendcode(8'hF0); #20;// break code 
		 kbd_sendcode(8'h1C); #20;// release 'a' 
		 kbd_sendcode(8'h12); #20;// press 'Shift' 
		 kbd_sendcode(8'h12); #20;// keep pressing 'Shift' 
		 kbd_sendcode(8'h12); #20;// keep pressing 'Shift' 
		 kbd_sendcode(8'h1C); #20;// press 'A'
		 kbd_sendcode(8'hF0); #20;// break code 
		 kbd_sendcode(8'h12); #20;// release 'Shift'
		 kbd_sendcode(8'hF0); #20;// break code 
		 kbd_sendcode(8'h1C); #20;// release 'A'
		 $stop;
		 

// --> end                                             
//$display("Running testbench");                       
end                                                    
//always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
//begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
//@eachvec;                                              
// --> end                                             
//end                                                    
endmodule




